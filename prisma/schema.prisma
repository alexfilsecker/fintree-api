// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String

  userInstitutionCredentials UserInstitutionCredentials[]
  categories Category[]
  movements Movement[]
}

model Institution {
  id Int @id @default(autoincrement())
  name InstitutionNames

  movements Movement[]
  userInstitutionCredentials UserInstitutionCredentials[]
}

enum InstitutionNames {
  SANTANDER
  COMMONWEALTH
}

model UserInstitutionCredentials {
  id Int @id @default(autoincrement())
  userId Int
  institutionId Int
  username String
  password String

  @@unique([userId, institutionId])

  user User @relation(fields: [userId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
}

model Category {
  id Int @id @default(autoincrement())
  userId Int
  parentCategoryId Int?
  name String
  description String?

  categories Category[] @relation("SubCategories")
  user User @relation(fields: [userId], references: [id])
  parentCategory Category? @relation("SubCategories", fields: [parentCategoryId], references: [id])
  movements Movement[]
}

model GroupMovement {
  id Int @id @default(autoincrement())
  name String?
  description String?

  movements Movement[]
}

model Movement {
  id Int @id @default(autoincrement())
  userId Int
  institutionId Int
  groupMovementId Int?
  categoryId Int?
  pending Boolean @default(false)
  date String
  valueDate String
  description String
  userDescription String?
  ammount Float
  balance Float?

  @@unique([userId, institutionId, valueDate, description, ammount])
  

  user User @relation(fields: [userId], references: [id])
  institution Institution @relation(fields: [institutionId], references: [id])
  groupMovement GroupMovement? @relation(fields: [groupMovementId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
}
